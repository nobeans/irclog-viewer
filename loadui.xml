<?xml version="1.0" encoding="UTF-8"?>
<con:loadui-project label="irclog-viewer" id="f649ea09-a4a8-4ad5-a052-d03b7f00dff6" xmlns:con="http://eviware.com/loadui/config"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="CanvasItem.abortOnFinish" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.saveReport" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="ModelItem.reportFolder" type="java.lang.String"/><con:property propagates="true" key="ModelItem.reportFormat" type="java.lang.String"/></con:properties><con:attributes/><con:addons/><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 1" id="726bbaae-4324-42af-a2e7-33893b2cba15" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { schedule() }
createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="rate" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">a6c9a4eb387aa42f9bc7383cd504f110</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">611</con:property><con:property key="gui.layoutY">68</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner 1" id="05fc3417-c763-434c-8642-9aeae5b91a48" category="runners"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an HTTP request
 *
 * @id com.eviware.WebRunner
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1.1
 * @dependency org.apache.httpcomponents:httpclient:4.1.1
 */

import org.apache.http.*
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.ReleasableUtils

import javax.net.ssl.*
import java.security.SecureRandom
import java.security.cert.CertificateException
import java.security.cert.X509Certificate

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import org.apache.http.conn.ssl.X509HostnameVerifier

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
    void checkClientTrusted(X509Certificate[] cert, String authType) throws CertificateException {}

    void checkServerTrusted(X509Certificate[] cert, String authType) throws CertificateException {}

    X509Certificate[] getAcceptedIssuers() { null }
}

class AllowAllHostNamesVerifier implements X509HostnameVerifier {
    void verify(String host, SSLSocket ssl) throws IOException {}

    void verify(String host, X509Certificate cert) throws SSLException {}

    void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {}

    boolean verify(String hostname, SSLSession session) {}
}

def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [new NaiveTrustManager()]
sslContext.init(new KeyManager[0], tms, new SecureRandom())

def sslSocketFactory = new SSLSocketFactory(sslContext, new AllowAllHostNamesVerifier())

def sr = new SchemeRegistry()
sr.register(new Scheme("http", PlainSocketFactory.socketFactory, 80))
sr.register(new Scheme("https", sslSocketFactory, 443))

def cm = new ThreadSafeClientConnManager(sr)
cm.maxTotal = 50000
cm.defaultMaxPerRoute = 50000

//Properties
createProperty('url', String) {->
    validateUrl()
}
createProperty('outputBody', Boolean, false)

createProperty('errorCodeList', String)

createProperty('proxyHost', String)
createProperty('proxyPort', Long)
createProperty('proxyUsername', String)
proxyPassword = createProperty('_proxyPassword', String)
authUsername = createProperty('_authUsername', String)
authPassword = createProperty('_authPassword', String)

http = new DefaultHttpClient(cm)

inlineUrlAuthUsername = null
inlineUrlAuthPassword = null

def runningSamples = ([] as Set).asSynchronized()
runAction = null

def dummyUrl = "http://GoSpamYourself.com"
def validUrl = ""
validateUrl = {
    def cleanUrl = url.value
    if (!(cleanUrl ==~ "https?://.*")) {
        cleanUrl = 'http://' + cleanUrl
    }

    if (cleanUrl =~ /https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/) {
        url.value = dummyUrl
        setInvalid(true)
        return
    }

    // extract possible username and password from username:password@domain syntax
    matcher = cleanUrl?.replace("http://", "") =~ /([^:]+):([^@]+)@(.+)/
    if (matcher) {
        inlineUrlAuthUsername = matcher[0][1]
        inlineUrlAuthPassword = matcher[0][2]
    } else {
        inlineUrlAuthUsername = inlineUrlAuthPassword = null
    }
    updateAuth()

    try {
        new URI(cleanUrl)
        setInvalid(!url.value || url.value == dummyUrl)
    } catch (e) {
        setInvalid(true)
    }

    runAction?.enabled = !isInvalid()
    validUrl = cleanUrl
}

updateProxy = {
    if (proxyHost.value?.trim() && proxyPort.value) {
        HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int) proxyPort.value, "http")
        http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost)

        if (proxyUsername.value?.trim() && proxyPassword.value) {
            http.credentialsProvider.setCredentials(
                    new AuthScope(proxyHost.value, (int) proxyPort.value),
                    new UsernamePasswordCredentials(proxyUsername.value, proxyPassword.value)
            )
        } else {
            http.credentialsProvider.clear()
        }
    } else {
        http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null)
    }
}

updateAuth = {
    def username = null
    def password = null
    if (inlineUrlAuthUsername && inlineUrlAuthPassword) {
        username = inlineUrlAuthUsername
        password = inlineUrlAuthPassword
    } else if (authUsername.value?.trim() && authPassword.value?.trim()) {
        username = authUsername.value
        password = authPassword.value
    }

    if (username && password) {
        http.credentialsProvider.setCredentials(
                new AuthScope(AuthScope.ANY),
                new UsernamePasswordCredentials(username, password)
        )
    }
}

validateUrl()
updateProxy()

requestResetValue = 0
sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0

sample = { message, sampleId ->

    def uri = message['url'] ?: validUrl
    if (uri) {
        def get = new HttpGet(uri)
        message['ID'] = uri

        runningSamples.add(get)
        try {
            def response = http.execute(get)
            message['Status'] = true
            message['URI'] = uri
            message['HttpStatus'] = response.statusLine.statusCode

            if (errorCodeList.value) {
                def assertionCodes = errorCodeList.value.split(',')

                for (code in assertionCodes) {
                    if (code.trim() == response.statusLine.statusCode.toString()) {
                        failedRequestCounter.increment()
                        failureCounter.increment()
                        break
                    }
                }
            }

            if (response.entity != null) {
                int contentLength = response.entity.contentLength
                message['Bytes'] = contentLength

                if (outputBody.value)
                    message['Response'] = EntityUtils.toString(response.entity)

                if (contentLength < 0) {
                    if (outputBody.value)
                        message['Bytes'] = message['Response'].length()
                    else
                        message['Bytes'] = EntityUtils.toString(response.entity).length()
                }

                response.entity.consumeContent()

                if (!runningSamples.remove(get)) {
                    throw new SampleCancelledException()
                }

                return message
            }
        } catch (e) {
            if (e instanceof SampleCancelledException)
                throw e

            if (e instanceof IOException)
                log.warn("IOException in {}: {}", label, e.message)
            else
                log.error("Exception in $label:", e)

            get.abort()

            if (!runningSamples.remove(get)) {
                throw new SampleCancelledException()
            }

            message['Status'] = false
            failedRequestCounter.increment()
            failureCounter.increment()

            return message
        }
    } else {
        throw new SampleCancelledException()
    }

}

onCancel = {
    def numberOfRunning = 0
    synchronized (runningSamples) {
        def methods = runningSamples.toArray()
        numberOfRunning = methods.size()
        runningSamples.clear()
        methods.each { if (!it.aborted) it.abort() }
    }

    return numberOfRunning
}

onAction("RESET") {
    requestResetValue = 0
    sampleResetValue = 0
    discardResetValue = 0
    failedResetValue = 0
}

addEventListener(PropertyEvent) { event ->
    if (event.event == PropertyEvent.Event.VALUE) {
        if (event.property in [proxyHost, proxyPort, proxyUsername, proxyPassword, authUsername, authPassword]) {
            http.credentialsProvider.clear()
            updateProxy()
            updateAuth()
        }
    }
}

//Layout
layout {

    box(layout: 'wrap 2, ins 0') {
        property(property: url, label: 'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt')
        action(label: 'Open in Browser', constraints: 'spanx 2', action: {
            java.awt.Desktop.desktop.browse(new java.net.URI(validUrl))
        })
        runAction = action(label: 'Run Once', action: { triggerAction('SAMPLE') })
        action(label: 'Abort Running Pages', action: { triggerAction('CANCEL') })
    }

    separator(vertical: true)
    box(layout: 'wrap, ins 0') {
        box(widget: 'display', layout: 'wrap 3, align right') {
            node(label: 'Requests', content: { requestCounter.get() - requestResetValue }, constraints: 'w 50!')
            node(label: 'Running', content: { currentlyRunning }, constraints: 'w 50!')
            node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints: 'w 60!')
            node(label: 'Queued', content: { queueSize }, constraints: 'w 50!')
            node(label: 'Discarded', content: { discardCounter.get() - discardResetValue }, constraints: 'w 50!')
            node(label: 'Failed', content: { failureCounter.get() - failedResetValue }, constraints: 'w 60!')
        }
        action(label: 'Reset', action: {
            requestResetValue = requestCounter.get()
            sampleResetValue = sampleCounter.get()
            discardResetValue = discardCounter.get()
            failedResetValue = failureCounter.get()
            triggerAction('CANCEL')
        }, constraints: 'align right')
    }
}

//Compact Layout
compactLayout {
    box(widget: 'display', layout: 'wrap 3, align right') {
        node(label: 'Requests', content: { requestCounter.get() - requestResetValue }, constraints: 'w 50!')
        node(label: 'Running', content: { currentlyRunning }, constraints: 'w 50!')
        node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints: 'w 60!')
        node(label: 'Queued', content: { queueSize }, constraints: 'w 50!')
        node(label: 'Discarded', content: { discardCounter.get() - discardResetValue }, constraints: 'w 50!')
        node(label: 'Failed', content: { failureCounter.get() - failedResetValue }, constraints: 'w 60!')
    }
}

settings(label: "Basic") {
    property(property: outputBody, label: 'Output Response Body')
    //property( property: propagateSession, label: 'Propagate Session' )
    property(property: concurrentSamples, label: 'Max Concurrent Requests')
    property(property: maxQueueSize, label: 'Max Queue')
    property(property: errorCodeList, label: 'Error Codes that Count as Failures', constraints: 'w 200!')
    property(property: countDiscarded, label: 'Count Discarded Requests as Failed')

}

settings(label: "Authentication") {
    property(property: authUsername, label: 'Username')
    property(property: authPassword, widget: 'password', label: 'Password')
}

settings(label: "Proxy") {
    property(property: proxyHost, label: 'Proxy Host')
    property(property: proxyPort, label: 'Proxy Port')
    property(property: proxyUsername, label: 'Proxy Username')
    property(property: proxyPassword, widget: 'password', label: 'Proxy Password')
}]]></con:property><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="url" type="java.lang.String">http://localhost:8080/irclog/summary</con:property><con:property propagates="true" key="outputBody" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_digest">4fc5de50fc13f0fe50112691f4fc523b</con:property><con:property key="_id">com.eviware.WebRunner</con:property><con:property key="_classLoader">com.eviware.WebRunner</con:property><con:property key="gui.layoutX">255</con:property><con:property key="gui.layoutY">384</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Table Log 1" id="dfc502ba-bf76-477d-bdff-e4d1bdb27805" category="output"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[//
// Copyright 2013 SmartBear Software
//
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
//
// http://ec.europa.eu/idabc/eupl
//
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
//

/**
 * Tabulates incoming messages and creates a csv output
 *
 * @id com.eviware.TableLog
 * @help http://www.loadui.org/Output/table-log-component.html
 * @name Table Log
 * @category output
 * @dependency net.sf.opencsv:opencsv:2.3
 * @nonBlocking true
 */

import au.com.bytecode.opencsv.CSVWriter
import java.io.FileWriter
import java.io.FileOutputStream
import java.io.FileInputStream
import java.text.SimpleDateFormat
import java.util.concurrent.CopyOnWriteArraySet
import java.util.concurrent.ConcurrentLinkedQueue

import javafx.application.Platform
import javafx.stage.FileChooser
import javafx.scene.control.TableView
import javafx.scene.control.TableColumn
import javafx.util.Callback
import javafx.beans.value.ObservableValue
import javafx.beans.value.ChangeListener
import java.util.concurrent.TimeUnit

inputTerminal.description = 'Messages sent here will be displayed in the table.'
likes( inputTerminal ) { true }

table = null
tableWriterFuture = null
fileWriterFuture = null
tableWriterDelay = 250
final messageQueue = [] as LinkedList
writer = null
writerLock = new Object()
final writeQueue = [] as ConcurrentLinkedQueue

createProperty( 'maxRows', Long, 250 )
createProperty( 'logFilePath', String )
createProperty( 'saveFile', Boolean, false )
createProperty( 'follow', Boolean, false )
createProperty( 'enabledInDistMode', Boolean, false )
createProperty( 'summaryRows', Long, 0 )
createProperty( 'appendSaveFile', Boolean, false )
createProperty( 'formatTimestamps', Boolean, true )
createProperty( 'addHeaders', Boolean, false )

cellFactory = { val -> { it -> val.value[val.tableColumn.text] } as ObservableValue } as Callback
rebuildTable = { table = new TableView( prefHeight: 200, minWidth: 500 ) }
final tableColumns = [] as CopyOnWriteArraySet
final addedColumns = []
def latestHeader
saveFileName = null
def format = new SimpleDateFormat( "HH:mm:ss:SSS" )

onMessage = { o, i, m ->
	if( controller && i == remoteTerminal ) {
		//controller received message from agent
		m["Source"] = o.label
		output( m )
	}
}

output = { message ->
	def writeLog = saveFile.value && saveFileName
	if( controller || writeLog ) {
		synchronized( this ) {
			addedColumns += message.keySet() - tableColumns
			tableColumns += addedColumns
		}
		
		if ( formatTimestamps.value ) {
			message.each() { key, value ->
				if ( key.toLowerCase().contains("timestamp") ) {
					try {
						message[key] = format.format( new Date( value ) )
					} catch ( IllegalArgumentException e ) {
						log.info( "Failed to format Timestamp in a column whose name hinted about it containing a Timestamp" )
					}
				}
			}
		}

		if( controller ) {
			synchronized( messageQueue ) {
				messageQueue << message
				while( messageQueue.size() > maxRows.value ) messageQueue.remove( 0 )
			}
		}

		if( writeLog ) {
			putMessageInWriteQueue( message )
		}
	}

	if( ! controller && enabledInDistMode.value ) {
		// on agent and enabled, so send message to controller
		send( controllerTerminal, message )
	}
}

putMessageInWriteQueue = { message ->
	def header = tableColumns as String[]
	if( addHeaders.value && !Arrays.equals( latestHeader, header ) ) {
		writeQueue << header
		latestHeader = header
	}
	def entries = header.collect { message[it] ?: "" } as String[]
	
	writeQueue << entries
}

onAction( "START" ) { buildFileName(); startTableWriter() }

onAction( "STOP" ) { stopTableWriter() }

onAction( "COMPLETE" ) { closeWriter() }

onAction( "RESET" ) {
	buildFileName()
	log.info("RESET CLEARING")
	tableColumns.clear()
	refreshLayout()
}

onRelease = { closeWriter() }

closeWriter = {
	withFileWriter( false ) { // TODO: Why do we do this?
		writer?.close()
		writer = null
	}
}

buildFileName = {
	if( !saveFile.value ) {
		closeWriter()
		return
	}
	
	synchronized( writerLock ) {
		if( writer ) return
	}
	
	def filePath = "${getBaseLogDir()}${File.separator}${logFilePath.value}"
	if( !validateLogFilePath( filePath ) ) {
		filePath = "${getBaseLogDir()}${File.separator}logs${File.separator}table-log${File.separator}${getDefaultLogFileName()}"
		log.warn( "Log file path wasn't specified properly. Try default path: [$filePath]" )
		if( !validateLogFilePath( filePath ) ) {
			log.error("Path: [$filePath] can't be used either. Table log component name contains invalid characters. Log file won't be saved.")
			saveFileName = null
			return
		}
	}
	if( !appendSaveFile.value ) {
		def f = new File( filePath )
		filePath = "${f.parent}${File.separator}${addTimestampToFileName( f.name )}"
	}
	new File( filePath ).parentFile.mkdirs()
	saveFileName = filePath
}

synchronized startTableWriter() {
	if ( !tableWriterFuture )
		tableWriterFuture = scheduleAtFixedRate( tableWriter, tableWriterDelay, tableWriterDelay, TimeUnit.MILLISECONDS )
}

void stopTableWriter() {
	tableWriterFuture?.cancel( true )
	tableWriter.run()
	tableWriterFuture = null
}

tableWriter = {
	def newColumns = []
	synchronized( this ) {
		for ( iter = addedColumns.iterator(); iter.hasNext();) {
			def added = iter.next()
			iter.remove()
			log.info "Adding column to Table Log: $added"
			def column = new TableColumn( cellValueFactory: cellFactory, text: added, sortable: false )
			column.widthProperty().addListener( { obs, oldVal, width -> setAttribute( "width_$added", "$width" ) } as ChangeListener )
			newColumns << column
			try {
				column.width = Double.parseDouble( getAttribute( "width_$added", null ) )
			} catch( e ) {
			}
		}	
	}
	
	def newMessages = []
	def excessItems =  0
	synchronized( messageQueue ) {
		excessItems = ( table.items.size() + messageQueue.size() - maxRows.value ) as int
		newMessages += messageQueue
		messageQueue.clear()
	}
	
	if ( newMessages || excessItems || newColumns ) {
		Platform.runLater {
			if ( newColumns ) table.columns.addAll newColumns
			if ( excessItems > 0 ) table.items.remove( 0, excessItems )
			if ( newMessages ) table.items.addAll newMessages
		}
	}
	
	writeToFile()
}

writeToFile =
{
	if( saveFileName )
	{
		withFileWriter() { fileWriter -> 
			while( !writeQueue.isEmpty() )
			{
				fileWriter.writeNext( writeQueue.poll() )
			}
		}
	}
}

getBaseLogDir = { System.getProperty( 'loadui.home', '.' ) }
getDefaultLogFileName = { getLabel().replaceAll( ' ','' ) }

validateLogFilePath = { filePath ->
	try {
		// the only good way to check if file path
		// is correct is to try read and writing
		def temp = new File( filePath )
		temp.parentFile.mkdirs()
		if( !temp.exists() ) {
			def fos = new FileOutputStream( temp )
			fos.write( [0] )
			fos.close()
			temp.delete()
		} else {
			def fis = new FileInputStream( temp )
			fis.read()
			fis.close()
		}
		return true
	} catch( e ) {
		return false
	}
}

addTimestampToFileName = { it.replaceAll('^(.*?)(\\.\\w+)?$', '$1-'+System.currentTimeMillis()+'$2') }

refreshLayout = {
	rebuildTable()
	layout(layout: 'wrap 4') {
		node( component: table, constraints: 'span' )
		action( label: 'Reset', action: { table.items.clear() } )
		action( label: 'Clear', action: {
			tableColumns.clear()
			refreshLayout()
		} )
		action( label: 'Save', action: {
			def fileChooser = new FileChooser( title: 'Save log' )
			fileChooser.extensionFilters.add( new FileChooser.ExtensionFilter( 'CSV', '*.csv' ) )
			def saveFile = fileChooser.showSaveDialog( table.scene.window )
			if( saveFile ) {
				def flushWriter = null
				try {
					flushWriter = new CSVWriter( new FileWriter( saveFile, false ), (char) ',' )
					flushWriter.writeNext( tableColumns as String[] )
					table.items.each { message -> flushWriter.writeNext( tableColumns.collect { message[it] ?: "" } as String[] ) }
				} catch ( e ) {
					log.error( 'Failed writing log to file!', e )
				} finally {
					flushWriter?.close()
				}
			}
		} )
		property( property: enabledInDistMode, label: 'Enabled in distributed mode', constraints: 'aligny center, alignx right' )
	}
	compactLayout {
		box( widget: 'display' ) {
			node( label: 'Rows', content: { table.items.size() } )
			node( label: 'Output File', content: { saveFileName ?: '-' } )
		}
	}
}
if( controller ) refreshLayout()

void withFileWriter( createIfNull = true, closure ) {
	synchronized( writerLock ) {
		if( createIfNull && !writer ) {
			log.info "Creating new CSVWriter writing to $saveFileName"
			writer = new CSVWriter( new FileWriter( saveFileName, appendSaveFile.value ), ',' as char )
		}
		closure( writer )
	}
}


settings( label: "General" ) {
	box {
		property( property: maxRows, label: 'Max Rows in Table' )
	}
	//FIXME summary report not working, see generateSummary below
	//box {
	//	property( property: summaryRows, label: 'Max Rows in Summary' )
	//}
}

settings( label:'Logging' ) {
	box {
		property( property: saveFile, label: 'Save Logs' )
		property( property: logFilePath, label: 'File name (relative to the .loadui directory)' )
		property( property: appendSaveFile, label: 'Append selected file' )
		property( property: formatTimestamps, label: 'Format timestamps' )
		property( property: addHeaders, label: 'Include headers' )
		label( '(If not appending file, its name will be used to generate new log files each time test is run.)' )
	}
}

generateSummary = { chapter ->
	//FIXME this is not working... the method is called by the report creator, but the table model below is no longer working
	if( summaryRows.value > 0 ) {
		int nRows = summaryRows.value
		def rows = table.items.subList( table.items.size() - nRows, table.items.size() )
		def cols = tableColumns as List
		chapter.addSection( getLabel() ).addTable( getLabel(), new javax.swing.table.AbstractTableModel() {
			int getColumnCount() { cols.size() }
			int getRowCount() { nRows }
			String getColumnName( int c ) { cols[c] }
			Object getValueAt( int r, int c ) { rows[r][cols[c]] }
		} )
	}
}
]]></con:property><con:property propagates="true" key="maxRows" type="java.lang.Long">250</con:property><con:property propagates="true" key="logFilePath" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="saveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="follow" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="enabledInDistMode" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="summaryRows" type="java.lang.Long">0</con:property><con:property propagates="true" key="appendSaveFile" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="formatTimestamps" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="addHeaders" type="java.lang.Boolean">false</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Table Log</con:property><con:property key="_digest">508b7143c764d62464e2cd0127cc1a1f</con:property><con:property key="_id">com.eviware.TableLog</con:property><con:property key="_classLoader">com.eviware.TableLog</con:property><con:property key="gui.layoutX">485</con:property><con:property key="gui.layoutY">729</con:property><con:property key="width_Errout">410.0</con:property><con:property key="width_TriggerTimestamp">96.0</con:property><con:property key="width_TimeTaken">32.0</con:property><con:property key="width_Stdout">10.0</con:property><con:property key="width_ExitValue">24.0</con:property><con:property key="width_Timestamp">96.0</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 2" id="f8beec45-9a47-4fc4-86ab-400376f10d5c" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { schedule() }
createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="rate" type="java.lang.Long">1</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">a6c9a4eb387aa42f9bc7383cd504f110</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">995</con:property><con:property key="gui.layoutY">73</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Web Page Runner 2" id="39fee029-95fa-4e41-a36d-e5b54ed914a1" category="runners"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an HTTP request
 *
 * @id com.eviware.WebRunner
 * @help http://www.loadui.org/Runners/web-page-runner-component.html
 * @name Web Page Runner
 * @category runners
 * @dependency org.apache.httpcomponents:httpcore:4.1.1
 * @dependency org.apache.httpcomponents:httpclient:4.1.1
 */

import org.apache.http.*
import org.apache.http.client.*
import org.apache.http.auth.*
import org.apache.http.conn.params.*
import org.apache.http.conn.scheme.*
import org.apache.http.client.methods.HttpGet
import org.apache.http.conn.ClientConnectionManager
import org.apache.http.util.EntityUtils
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager
import com.eviware.loadui.api.events.ActionEvent
import com.eviware.loadui.api.events.PropertyEvent
import com.eviware.loadui.api.model.CanvasItem
import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException
import com.eviware.loadui.impl.component.ActivityStrategies
import com.eviware.loadui.util.ReleasableUtils

import javax.net.ssl.*
import java.security.SecureRandom
import java.security.cert.CertificateException
import java.security.cert.X509Certificate

import org.apache.http.conn.scheme.Scheme
import org.apache.http.conn.ssl.SSLSocketFactory
import org.apache.http.conn.ssl.X509HostnameVerifier

//SSL support, trust all certificates and hostnames.
class NaiveTrustManager implements X509TrustManager {
    void checkClientTrusted(X509Certificate[] cert, String authType) throws CertificateException {}

    void checkServerTrusted(X509Certificate[] cert, String authType) throws CertificateException {}

    X509Certificate[] getAcceptedIssuers() { null }
}

class AllowAllHostNamesVerifier implements X509HostnameVerifier {
    void verify(String host, SSLSocket ssl) throws IOException {}

    void verify(String host, X509Certificate cert) throws SSLException {}

    void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {}

    boolean verify(String hostname, SSLSession session) {}
}

def sslContext = SSLContext.getInstance("SSL")
TrustManager[] tms = [new NaiveTrustManager()]
sslContext.init(new KeyManager[0], tms, new SecureRandom())

def sslSocketFactory = new SSLSocketFactory(sslContext, new AllowAllHostNamesVerifier())

def sr = new SchemeRegistry()
sr.register(new Scheme("http", PlainSocketFactory.socketFactory, 80))
sr.register(new Scheme("https", sslSocketFactory, 443))

def cm = new ThreadSafeClientConnManager(sr)
cm.maxTotal = 50000
cm.defaultMaxPerRoute = 50000

//Properties
createProperty('url', String) {->
    validateUrl()
}
createProperty('outputBody', Boolean, false)

createProperty('errorCodeList', String)

createProperty('proxyHost', String)
createProperty('proxyPort', Long)
createProperty('proxyUsername', String)
proxyPassword = createProperty('_proxyPassword', String)
authUsername = createProperty('_authUsername', String)
authPassword = createProperty('_authPassword', String)

http = new DefaultHttpClient(cm)

inlineUrlAuthUsername = null
inlineUrlAuthPassword = null

def runningSamples = ([] as Set).asSynchronized()
runAction = null

def dummyUrl = "http://GoSpamYourself.com"
def validUrl = ""
validateUrl = {
    def cleanUrl = url.value
    if (!(cleanUrl ==~ "https?://.*")) {
        cleanUrl = 'http://' + cleanUrl
    }

    if (cleanUrl =~ /https?:\/\/(www\.)?(eviware\.com|(soapui|loadui)\.org)(\/.*)?/) {
        url.value = dummyUrl
        setInvalid(true)
        return
    }

    // extract possible username and password from username:password@domain syntax
    matcher = cleanUrl?.replace("http://", "") =~ /([^:]+):([^@]+)@(.+)/
    if (matcher) {
        inlineUrlAuthUsername = matcher[0][1]
        inlineUrlAuthPassword = matcher[0][2]
    } else {
        inlineUrlAuthUsername = inlineUrlAuthPassword = null
    }
    updateAuth()

    try {
        new URI(cleanUrl)
        setInvalid(!url.value || url.value == dummyUrl)
    } catch (e) {
        setInvalid(true)
    }

    runAction?.enabled = !isInvalid()
    validUrl = cleanUrl
}

updateProxy = {
    if (proxyHost.value?.trim() && proxyPort.value) {
        HttpHost hcProxyHost = new HttpHost(proxyHost.value, (int) proxyPort.value, "http")
        http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, hcProxyHost)

        if (proxyUsername.value?.trim() && proxyPassword.value) {
            http.credentialsProvider.setCredentials(
                    new AuthScope(proxyHost.value, (int) proxyPort.value),
                    new UsernamePasswordCredentials(proxyUsername.value, proxyPassword.value)
            )
        } else {
            http.credentialsProvider.clear()
        }
    } else {
        http.params.setParameter(ConnRoutePNames.DEFAULT_PROXY, null)
    }
}

updateAuth = {
    def username = null
    def password = null
    if (inlineUrlAuthUsername && inlineUrlAuthPassword) {
        username = inlineUrlAuthUsername
        password = inlineUrlAuthPassword
    } else if (authUsername.value?.trim() && authPassword.value?.trim()) {
        username = authUsername.value
        password = authPassword.value
    }

    if (username && password) {
        http.credentialsProvider.setCredentials(
                new AuthScope(AuthScope.ANY),
                new UsernamePasswordCredentials(username, password)
        )
    }
}

validateUrl()
updateProxy()

requestResetValue = 0
sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0

sample = { message, sampleId ->

    def uri = message['url'] ?: validUrl
    if (uri) {
        def get = new HttpGet(uri)
        message['ID'] = uri

        runningSamples.add(get)
        try {
            def response = http.execute(get)
            message['Status'] = true
            message['URI'] = uri
            message['HttpStatus'] = response.statusLine.statusCode

            if (errorCodeList.value) {
                def assertionCodes = errorCodeList.value.split(',')

                for (code in assertionCodes) {
                    if (code.trim() == response.statusLine.statusCode.toString()) {
                        failedRequestCounter.increment()
                        failureCounter.increment()
                        break
                    }
                }
            }

            if (response.entity != null) {
                int contentLength = response.entity.contentLength
                message['Bytes'] = contentLength

                if (outputBody.value)
                    message['Response'] = EntityUtils.toString(response.entity)

                if (contentLength < 0) {
                    if (outputBody.value)
                        message['Bytes'] = message['Response'].length()
                    else
                        message['Bytes'] = EntityUtils.toString(response.entity).length()
                }

                response.entity.consumeContent()

                if (!runningSamples.remove(get)) {
                    throw new SampleCancelledException()
                }

                return message
            }
        } catch (e) {
            if (e instanceof SampleCancelledException)
                throw e

            if (e instanceof IOException)
                log.warn("IOException in {}: {}", label, e.message)
            else
                log.error("Exception in $label:", e)

            get.abort()

            if (!runningSamples.remove(get)) {
                throw new SampleCancelledException()
            }

            message['Status'] = false
            failedRequestCounter.increment()
            failureCounter.increment()

            return message
        }
    } else {
        throw new SampleCancelledException()
    }

}

onCancel = {
    def numberOfRunning = 0
    synchronized (runningSamples) {
        def methods = runningSamples.toArray()
        numberOfRunning = methods.size()
        runningSamples.clear()
        methods.each { if (!it.aborted) it.abort() }
    }

    return numberOfRunning
}

onAction("RESET") {
    requestResetValue = 0
    sampleResetValue = 0
    discardResetValue = 0
    failedResetValue = 0
}

addEventListener(PropertyEvent) { event ->
    if (event.event == PropertyEvent.Event.VALUE) {
        if (event.property in [proxyHost, proxyPort, proxyUsername, proxyPassword, authUsername, authPassword]) {
            http.credentialsProvider.clear()
            updateProxy()
            updateAuth()
        }
    }
}

//Layout
layout {

    box(layout: 'wrap 2, ins 0') {
        property(property: url, label: 'Web Page Address', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt')
        action(label: 'Open in Browser', constraints: 'spanx 2', action: {
            java.awt.Desktop.desktop.browse(new java.net.URI(validUrl))
        })
        runAction = action(label: 'Run Once', action: { triggerAction('SAMPLE') })
        action(label: 'Abort Running Pages', action: { triggerAction('CANCEL') })
    }

    separator(vertical: true)
    box(layout: 'wrap, ins 0') {
        box(widget: 'display', layout: 'wrap 3, align right') {
            node(label: 'Requests', content: { requestCounter.get() - requestResetValue }, constraints: 'w 50!')
            node(label: 'Running', content: { currentlyRunning }, constraints: 'w 50!')
            node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints: 'w 60!')
            node(label: 'Queued', content: { queueSize }, constraints: 'w 50!')
            node(label: 'Discarded', content: { discardCounter.get() - discardResetValue }, constraints: 'w 50!')
            node(label: 'Failed', content: { failureCounter.get() - failedResetValue }, constraints: 'w 60!')
        }
        action(label: 'Reset', action: {
            requestResetValue = requestCounter.get()
            sampleResetValue = sampleCounter.get()
            discardResetValue = discardCounter.get()
            failedResetValue = failureCounter.get()
            triggerAction('CANCEL')
        }, constraints: 'align right')
    }
}

//Compact Layout
compactLayout {
    box(widget: 'display', layout: 'wrap 3, align right') {
        node(label: 'Requests', content: { requestCounter.get() - requestResetValue }, constraints: 'w 50!')
        node(label: 'Running', content: { currentlyRunning }, constraints: 'w 50!')
        node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue }, constraints: 'w 60!')
        node(label: 'Queued', content: { queueSize }, constraints: 'w 50!')
        node(label: 'Discarded', content: { discardCounter.get() - discardResetValue }, constraints: 'w 50!')
        node(label: 'Failed', content: { failureCounter.get() - failedResetValue }, constraints: 'w 60!')
    }
}

settings(label: "Basic") {
    property(property: outputBody, label: 'Output Response Body')
    //property( property: propagateSession, label: 'Propagate Session' )
    property(property: concurrentSamples, label: 'Max Concurrent Requests')
    property(property: maxQueueSize, label: 'Max Queue')
    property(property: errorCodeList, label: 'Error Codes that Count as Failures', constraints: 'w 200!')
    property(property: countDiscarded, label: 'Count Discarded Requests as Failed')

}

settings(label: "Authentication") {
    property(property: authUsername, label: 'Username')
    property(property: authPassword, widget: 'password', label: 'Password')
}

settings(label: "Proxy") {
    property(property: proxyHost, label: 'Proxy Host')
    property(property: proxyPort, label: 'Proxy Port')
    property(property: proxyUsername, label: 'Proxy Username')
    property(property: proxyPassword, widget: 'password', label: 'Proxy Password')
}]]></con:property><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="url" type="java.lang.String">http://localhost:8080/irclog/2013-10-19/test3</con:property><con:property propagates="true" key="outputBody" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="errorCodeList" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyHost" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyPort" xsi:nil="true" type="java.lang.Long" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="proxyUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_proxyPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authUsername" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="true" key="_authPassword" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Web Page Runner</con:property><con:property key="_digest">4fc5de50fc13f0fe50112691f4fc523b</con:property><con:property key="_id">com.eviware.WebRunner</con:property><con:property key="_classLoader">com.eviware.WebRunner</con:property><con:property key="gui.layoutX">746</con:property><con:property key="gui.layoutY">333</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Script Runner 1" id="a8e4d7f7-f723-4bac-89c7-094e4c70ddf9" category="runners"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String"><![CDATA[// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Runs a Groovy Script
 *
 * @name Script Runner
 * @category runners
 * @id com.eviware.ScriptRunner
 * @help http://loadui.org/Custom-Components/script-runner.html
 */

import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException
import groovy.lang.GroovyShell
import groovy.lang.Binding

//Properties
createProperty('scriptFile', File, null, false)
createProperty('cacheScriptContent', Boolean, true, false)
createProperty('setBinding', Boolean, true)
scriptContent = createProperty('_scriptContent', String) {
    parseScript()
}

runningSamples = Collections.synchronizedSet(new HashSet())
shell = new GroovyShell()
script = null

requestResetValue = 0
sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
runButton = null

parseScript = {
    if (!scriptContent.value) {
        runButton?.enabled = false
        return
    }

    try {
        script = shell.parse(scriptContent.value)
        runButton?.enabled = true
    } catch (e) {
        log.error(e.message, e)
        runButton?.enabled = false
    }
}

//We'll only ever read the file on the controller, and send out the script content as a String to the agents.
if (controller) {
    lastModified = null
    updateScript = {
        if (scriptFile.value && scriptFile.value.exists()) {
            if (lastModified != scriptFile.value.lastModified()) {
                scriptContent.value = scriptFile.value.text
                lastModified = scriptFile.value.lastModified()
                parseScript()
            }
        } else {
            lastModified = null
            scriptContent.value = null
        }
    }
    updateScript()

    onReplace(scriptFile, updateScript)
    onReplace(cacheScriptContent, updateScript)
}


sample = { message, sampleId ->
    try {
        runningSamples.add(Thread.currentThread())
        if (controller && !cacheScriptContent.value)
            updateScript()
        if (setBinding.value)
            script.binding = new Binding(new HashMap(message))
        script.binding.setProperty('log', log)
        def result = script.run()
        message['Status'] = true
        if (result instanceof Map) {
            message.putAll(result)
        } else {
            message['Result'] = String.valueOf(result)
        }
    } catch (Throwable e) {
        if (e instanceof InterruptedException)
            throw new SampleCancelledException()
        message['Status'] = false
        message['Result'] = e.toString()
        //failedRequestCounter.increment()
        failureCounter.increment()
    } finally {
        runningSamples.remove(Thread.currentThread())
    }

    return message
}

onCancel = {
    synchronized (runningSamples) {
        def threads = runningSamples.toArray()
        runningSamples.clear()
        threads.each { it.interrupt() }
        return threads.length
    }
}

onRelease = {
    shell.resetLoadedClasses()
}

onAction("RESET") {
    if (controller) updateScript()
    requestResetValue = 0
    sampleResetValue = 0
    discardResetValue = 0
    failedResetValue = 0
}

//Layout
layout {
    box(layout: 'wrap 2, ins 0') {
        property(property: scriptFile, label: 'Groovy Script File', constraints: 'w 300!, spanx 2', style: '-fx-font-size: 17pt')
        property(property: cacheScriptContent, label: 'Cache script content', constraints: 'growx, spanx 2')
        separator()
        runButton = action(label: 'Run Once', action: { triggerAction('SAMPLE') }, enabled: (scriptFile.value && scriptFile.value.exists()))
        action(label: 'Abort Running Scripts', action: { triggerAction('CANCEL') })
    }
    separator(vertical: true)
    box(layout: 'wrap, ins 0') {
        box(widget: 'display', layout: 'wrap 3, align right', column: '[50|50|60]') {
            node(label: 'Requests', content: { requestCounter.get() - requestResetValue })
            node(label: 'Running', content: { currentlyRunning })
            node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue })
            node(label: 'Queued', content: { queueSize })
            node(label: 'Discarded', content: { discardCounter.get() - discardResetValue })
            node(label: 'Failed', content: { failureCounter.get() - failedResetValue })
        }
        action(label: 'Reset', action: {
            requestResetValue = requestCounter.get()
            sampleResetValue = sampleCounter.get()
            discardResetValue = discardCounter.get()
            failedResetValue = failureCounter.get()
            triggerAction('CANCEL')
        }, constraints: 'align right')
    }
}

compactLayout {
    box(widget: 'display', layout: 'wrap 3, align right', column: '[50|50|60]') {
        node(label: 'Requests', content: { requestCounter.get() - requestResetValue })
        node(label: 'Running', content: { currentlyRunning })
        node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue })
        node(label: 'Queued', content: { queueSize })
        node(label: 'Discarded', content: { discardCounter.get() - discardResetValue })
        node(label: 'Failed', content: { failureCounter.get() - failedResetValue })
    }
}

settings(label: "Basic") {
    property(property: setBinding, label: 'Make trigger message parameters available to the script')
    property(property: concurrentSamplesProperty, label: 'Max concurrently running')
}]]></con:property><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="false" key="scriptFile" xsi:nil="true" type="java.io.File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:property propagates="false" key="cacheScriptContent" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="setBinding" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="_scriptContent" xsi:nil="true" type="java.lang.String" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Script Runner</con:property><con:property key="_digest">9807bdfe19025a80bf36c0a8fe3012cb</con:property><con:property key="_id">com.eviware.ScriptRunner</con:property><con:property key="_classLoader">com.eviware.ScriptRunner</con:property><con:property key="gui.layoutX">1552</con:property><con:property key="gui.layoutY">209</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Process Runner 1" id="ff008082-6ad4-40d7-ba91-78347ffce919" category="runners"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Runs a Operating System Process
 *
 * @name Process Runner
 * @category runners
 * @id com.eviware.ProcessRunner
 * @help http://loadui.org/Custom-Components/process-runner.html
 */

import com.eviware.loadui.impl.component.categories.RunnerBase.SampleCancelledException

//Properties
createProperty('command', String, '') {
    runButton?.enabled = it
}

runningSamples = Collections.synchronizedSet(new HashSet())

requestResetValue = 0
sampleResetValue = 0
discardResetValue = 0
failedResetValue = 0
runButton = null

sample = { message, sampleId ->
    try {
        runningSamples.add(Thread.currentThread())

        // start a process and wait for it to finish
        def proc = command.value.execute()
        proc.waitFor()

        // add result properties
        message["ExitValue"] = proc.exitValue()
        message["Stdout"] = proc.in.text
        message["Errout"] = proc.err.text

        // fail if process failed
        if (proc.exitValue() != 0)
            failureCounter.increment()
    }
    catch (e) {
        if (e instanceof InterruptedException)
            throw new SampleCancelledException()
        // add error properties
        message["ExitValue"] = -1
        message["Errout"] = e.message

        failureCounter.increment()
    } finally {
        runningSamples.remove(Thread.currentThread())
    }

    return message
}

onCancel = {
    synchronized (runningSamples) {
        def threads = runningSamples.toArray()
        runningSamples.clear()
        threads.each { it.interrupt() }
    }
}

onAction("RESET") {
    requestResetValue = 0
    sampleResetValue = 0
    discardResetValue = 0
    failedResetValue = 0
}

//Layout
layout {
    box(layout: 'wrap 2, ins 0') {
        property(property: command, label: "Command", constraints: 'growx, span 2')
        separator()
        runButton = action(label: 'Run Once', action: { triggerAction('SAMPLE') }, enabled: (command.value))
        action(label: 'Abort Running Commands', action: { triggerAction('CANCEL') })
    }
    separator(vertical: true)
    box(layout: 'wrap, ins 0') {
        box(widget: 'display', layout: 'wrap 3, align right', column: '[50|50|60]') {
            node(label: 'Requests', content: { requestCounter.get() - requestResetValue })
            node(label: 'Running', content: { currentlyRunning })
            node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue })
            node(label: 'Queued', content: { queueSize })
            node(label: 'Discarded', content: { discardCounter.get() - discardResetValue })
            node(label: 'Failed', content: { failureCounter.get() - failedResetValue })
        }
        action(label: 'Reset', action: {
            requestResetValue = requestCounter.get()
            sampleResetValue = sampleCounter.get()
            discardResetValue = discardCounter.get()
            failedResetValue = failureCounter.get()
            triggerAction('CANCEL')
        }, constraints: 'align right')
    }
}

compactLayout {
    box(widget: 'display', layout: 'wrap 3, align right', column: '[50|50|60]') {
        node(label: 'Requests', content: { requestCounter.get() - requestResetValue })
        node(label: 'Running', content: { currentlyRunning })
        node(label: 'Completed', content: { sampleCounter.get() - sampleResetValue })
        node(label: 'Queued', content: { queueSize })
        node(label: 'Discarded', content: { discardCounter.get() - discardResetValue })
        node(label: 'Failed', content: { failureCounter.get() - failedResetValue })
    }
}

settings(label: "Basic") {
    property(property: concurrentSamplesProperty, label: 'Max concurrently running')
}</con:property><con:property propagates="true" key="concurrentSamples" type="java.lang.Long">100</con:property><con:property propagates="true" key="maxQueueSize" type="java.lang.Long">1000</con:property><con:property propagates="true" key="countDiscarded" type="java.lang.Boolean">false</con:property><con:property propagates="true" key="command" type="java.lang.String">/usr/local/bin/wget -O /dev/null --no-proxy http://localhost:8080/irclog/ -q</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Process Runner</con:property><con:property key="_digest">1d5566a1e0b3803552e8b9f4f69b74bb</con:property><con:property key="_id">com.eviware.ProcessRunner</con:property><con:property key="_classLoader">com.eviware.ProcessRunner</con:property><con:property key="gui.layoutX">1106</con:property><con:property key="gui.layoutY">439</con:property></con:attributes><con:addons/></con:component><con:component type="com.eviware.loadui.groovy.GroovyComponent" label="Fixed Rate 3" id="c39b111d-38b1-4248-af47-f91724d09e7e" category="generators"><con:properties><con:property propagates="true" key="ModelItem.description" type="java.lang.String"/><con:property propagates="true" key="_script" type="java.lang.String">// 
// Copyright 2013 SmartBear Software
// 
// Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent
// versions of the EUPL (the "Licence");
// You may not use this work except in compliance with the Licence.
// You may obtain a copy of the Licence at:
// 
// http://ec.europa.eu/idabc/eupl
// 
// Unless required by applicable law or agreed to in writing, software distributed under the Licence is
// distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the Licence for the specific language governing permissions and limitations
// under the Licence.
// 

/**
 * Sends an empty message periodically, at a set rate
 * 
 * @id com.eviware.FixedRate
 * @help http://www.loadui.org/Generators/fixed-rate-component.html
 * @name Fixed Rate
 * @category generators
 * @nonBlocking true
 */

import java.util.concurrent.TimeUnit

//Properties
createProperty( 'rate', Long, 10 ) { schedule() }
createProperty( 'unit', String, 'Sec' ) { schedule() }

onReplace( stateProperty ) { value ->
	if( value ) schedule()
	else future?.cancel( true )
}

createProperty( 'burstSize', Long, 1 )

triggerBurst = { 
	burstSize.value.times {
		trigger() 
	} 
}

future = null
schedule = {
	if( stateProperty.value ) {
		long microsecondsPerUnit = unit.value == 'Sec' ? 1000000 : unit.value == 'Min' ? 60000000 : 3600000000
		long delay = Math.max( 1, (long)(microsecondsPerUnit / rate.value) )
		future?.cancel( true )
		future = scheduleAtFixedRate( triggerBurst, delay, delay, TimeUnit.MICROSECONDS )
	}
}

onAction( "START" ) { schedule() }
onAction( "STOP" ) { future?.cancel( true ) }

//Layout
layout { 
	property( property:rate, label:'Rate', min:1 ) 
	separator( vertical:true )
	property( property:unit, label:'Unit', options:['Sec','Min','Hour'] )
	separator( vertical:true )
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" }, constraints:'wmin 75' )
	}
}

//Compact Layout
compactLayout {
	box( widget:'display' ) {
		node( label:'Rate', content: { "$rate.value / $unit.value" } )
	}
}

//Settings
settings( label: "General" ) {
	property( property: burstSize, label: 'Burst size' ) 
}

if( running ) schedule()</con:property><con:property propagates="true" key="stateProperty" type="java.lang.Boolean">true</con:property><con:property propagates="true" key="rate" type="java.lang.Long">10</con:property><con:property propagates="true" key="unit" type="java.lang.String">Sec</con:property><con:property propagates="true" key="burstSize" type="java.lang.Long">1</con:property></con:properties><con:attributes><con:property key="com.eviware.loadui.api.model.ComponentItem@type">Fixed Rate</con:property><con:property key="_digest">a6c9a4eb387aa42f9bc7383cd504f110</con:property><con:property key="_id">com.eviware.FixedRate</con:property><con:property key="_classLoader">com.eviware.FixedRate</con:property><con:property key="gui.layoutX">1353</con:property><con:property key="gui.layoutY">124</con:property></con:attributes><con:addons/></con:component><con:connection outputTerminalId="05fc3417-c763-434c-8642-9aeae5b91a48/resultTerminal" inputTerminalId="dfc502ba-bf76-477d-bdff-e4d1bdb27805/inputTerminal"/><con:connection outputTerminalId="726bbaae-4324-42af-a2e7-33893b2cba15/triggerTerminal" inputTerminalId="05fc3417-c763-434c-8642-9aeae5b91a48/triggerTerminal"/><con:connection outputTerminalId="f8beec45-9a47-4fc4-86ab-400376f10d5c/triggerTerminal" inputTerminalId="39fee029-95fa-4e41-a36d-e5b54ed914a1/triggerTerminal"/><con:connection outputTerminalId="39fee029-95fa-4e41-a36d-e5b54ed914a1/resultTerminal" inputTerminalId="dfc502ba-bf76-477d-bdff-e4d1bdb27805/inputTerminal"/><con:connection outputTerminalId="ff008082-6ad4-40d7-ba91-78347ffce919/resultTerminal" inputTerminalId="dfc502ba-bf76-477d-bdff-e4d1bdb27805/inputTerminal"/><con:connection outputTerminalId="c39b111d-38b1-4248-af47-f91724d09e7e/triggerTerminal" inputTerminalId="ff008082-6ad4-40d7-ba91-78347ffce919/triggerTerminal"/><con:statistics><con:page title="Untitled Page 1"><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Chart 1"><con:chart statisticHolder="f649ea09-a4a8-4ad5-a052-d03b7f00dff6"><con:attributes><con:property key="_CHART_segments">68:36:f649ea09-a4a8-4ad5-a052-d03b7f00dff68:Requests10:PER_SECOND4:main</con:property><con:property key="_CHART__SEGMENT_36:f649ea09-a4a8-4ad5-a052-d03b7f00dff68:Requests10:PER_SECOND4:main_color">#00b2d2</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">SECONDS</con:property></con:attributes></con:chartGroup><con:chartGroup type="com.eviware.loadui.api.statistics.model.chart.line.LineChartView" title="Chart 2"><con:chart statisticHolder="f649ea09-a4a8-4ad5-a052-d03b7f00dff6"><con:attributes><con:property key="_CHART_segments">71:36:f649ea09-a4a8-4ad5-a052-d03b7f00dff616:Request Failures5:TOTAL4:main73:36:f649ea09-a4a8-4ad5-a052-d03b7f00dff618:Assertion Failures5:TOTAL4:main62:36:f649ea09-a4a8-4ad5-a052-d03b7f00dff68:Failures5:TOTAL4:main</con:property><con:property key="_CHART__SEGMENT_36:f649ea09-a4a8-4ad5-a052-d03b7f00dff68:Failures5:TOTAL4:main_color">#ffffff</con:property><con:property key="_CHART__SEGMENT_36:f649ea09-a4a8-4ad5-a052-d03b7f00dff618:Assertion Failures5:TOTAL4:main_color">#df51a5</con:property><con:property key="_CHART__SEGMENT_36:f649ea09-a4a8-4ad5-a052-d03b7f00dff616:Request Failures5:TOTAL4:main_color">#c3e166</con:property></con:attributes></con:chart><con:attributes><con:property key="_CHARTGROUP_zoomLevel">SECONDS</con:property></con:attributes></con:chartGroup></con:page></con:statistics></con:loadui-project>